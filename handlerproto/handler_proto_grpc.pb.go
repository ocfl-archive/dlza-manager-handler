// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: handler_proto.proto

package handlerproto

import (
	context "context"
	dlzamanagerproto "github.com/ocfl-archive/dlza-manager/dlzamanagerproto"
	proto "go.ub.unibas.ch/cloud/genericproto/v2/pkg/generic/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploaderStorageHandlerService_CopyFile_FullMethodName = "/handlerproto.UploaderStorageHandlerService/CopyFile"
)

// UploaderStorageHandlerServiceClient is the client API for UploaderStorageHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderStorageHandlerServiceClient interface {
	CopyFile(ctx context.Context, in *dlzamanagerproto.IncomingOrder, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type uploaderStorageHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderStorageHandlerServiceClient(cc grpc.ClientConnInterface) UploaderStorageHandlerServiceClient {
	return &uploaderStorageHandlerServiceClient{cc}
}

func (c *uploaderStorageHandlerServiceClient) CopyFile(ctx context.Context, in *dlzamanagerproto.IncomingOrder, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, UploaderStorageHandlerService_CopyFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderStorageHandlerServiceServer is the server API for UploaderStorageHandlerService service.
// All implementations must embed UnimplementedUploaderStorageHandlerServiceServer
// for forward compatibility
type UploaderStorageHandlerServiceServer interface {
	CopyFile(context.Context, *dlzamanagerproto.IncomingOrder) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedUploaderStorageHandlerServiceServer()
}

// UnimplementedUploaderStorageHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderStorageHandlerServiceServer struct {
}

func (UnimplementedUploaderStorageHandlerServiceServer) CopyFile(context.Context, *dlzamanagerproto.IncomingOrder) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedUploaderStorageHandlerServiceServer) mustEmbedUnimplementedUploaderStorageHandlerServiceServer() {
}

// UnsafeUploaderStorageHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderStorageHandlerServiceServer will
// result in compilation errors.
type UnsafeUploaderStorageHandlerServiceServer interface {
	mustEmbedUnimplementedUploaderStorageHandlerServiceServer()
}

func RegisterUploaderStorageHandlerServiceServer(s grpc.ServiceRegistrar, srv UploaderStorageHandlerServiceServer) {
	s.RegisterService(&UploaderStorageHandlerService_ServiceDesc, srv)
}

func _UploaderStorageHandlerService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.IncomingOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderStorageHandlerServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderStorageHandlerService_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderStorageHandlerServiceServer).CopyFile(ctx, req.(*dlzamanagerproto.IncomingOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderStorageHandlerService_ServiceDesc is the grpc.ServiceDesc for UploaderStorageHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderStorageHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.UploaderStorageHandlerService",
	HandlerType: (*UploaderStorageHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyFile",
			Handler:    _UploaderStorageHandlerService_CopyFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	UploaderHandlerService_AlterStatus_FullMethodName              = "/handlerproto.UploaderHandlerService/AlterStatus"
	UploaderHandlerService_GetObjectInstancesByName_FullMethodName = "/handlerproto.UploaderHandlerService/GetObjectInstancesByName"
	UploaderHandlerService_GetObjectsByChecksum_FullMethodName     = "/handlerproto.UploaderHandlerService/GetObjectsByChecksum"
)

// UploaderHandlerServiceClient is the client API for UploaderHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderHandlerServiceClient interface {
	AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetObjectInstancesByName(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	GetObjectsByChecksum(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error)
}

type uploaderHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderHandlerServiceClient(cc grpc.ClientConnInterface) UploaderHandlerServiceClient {
	return &uploaderHandlerServiceClient{cc}
}

func (c *uploaderHandlerServiceClient) AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, UploaderHandlerService_AlterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) GetObjectInstancesByName(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, UploaderHandlerService_GetObjectInstancesByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) GetObjectsByChecksum(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error) {
	out := new(dlzamanagerproto.Objects)
	err := c.cc.Invoke(ctx, UploaderHandlerService_GetObjectsByChecksum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderHandlerServiceServer is the server API for UploaderHandlerService service.
// All implementations must embed UnimplementedUploaderHandlerServiceServer
// for forward compatibility
type UploaderHandlerServiceServer interface {
	AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error)
	GetObjectInstancesByName(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error)
	GetObjectsByChecksum(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Objects, error)
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

// UnimplementedUploaderHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderHandlerServiceServer struct {
}

func (UnimplementedUploaderHandlerServiceServer) AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) GetObjectInstancesByName(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByName not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) GetObjectsByChecksum(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByChecksum not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) mustEmbedUnimplementedUploaderHandlerServiceServer() {
}

// UnsafeUploaderHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderHandlerServiceServer will
// result in compilation errors.
type UnsafeUploaderHandlerServiceServer interface {
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

func RegisterUploaderHandlerServiceServer(s grpc.ServiceRegistrar, srv UploaderHandlerServiceServer) {
	s.RegisterService(&UploaderHandlerService_ServiceDesc, srv)
}

func _UploaderHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_AlterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_GetObjectInstancesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).GetObjectInstancesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_GetObjectInstancesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).GetObjectInstancesByName(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_GetObjectsByChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).GetObjectsByChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderHandlerService_GetObjectsByChecksum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).GetObjectsByChecksum(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderHandlerService_ServiceDesc is the grpc.ServiceDesc for UploaderHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.UploaderHandlerService",
	HandlerType: (*UploaderHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlterStatus",
			Handler:    _UploaderHandlerService_AlterStatus_Handler,
		},
		{
			MethodName: "GetObjectInstancesByName",
			Handler:    _UploaderHandlerService_GetObjectInstancesByName_Handler,
		},
		{
			MethodName: "GetObjectsByChecksum",
			Handler:    _UploaderHandlerService_GetObjectsByChecksum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	ClerkStorageHandlerService_CreateStoragePartition_FullMethodName = "/handlerproto.ClerkStorageHandlerService/CreateStoragePartition"
)

// ClerkStorageHandlerServiceClient is the client API for ClerkStorageHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkStorageHandlerServiceClient interface {
	CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type clerkStorageHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkStorageHandlerServiceClient(cc grpc.ClientConnInterface) ClerkStorageHandlerServiceClient {
	return &clerkStorageHandlerServiceClient{cc}
}

func (c *clerkStorageHandlerServiceClient) CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkStorageHandlerService_CreateStoragePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkStorageHandlerServiceServer is the server API for ClerkStorageHandlerService service.
// All implementations must embed UnimplementedClerkStorageHandlerServiceServer
// for forward compatibility
type ClerkStorageHandlerServiceServer interface {
	CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedClerkStorageHandlerServiceServer()
}

// UnimplementedClerkStorageHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkStorageHandlerServiceServer struct {
}

func (UnimplementedClerkStorageHandlerServiceServer) CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePartition not implemented")
}
func (UnimplementedClerkStorageHandlerServiceServer) mustEmbedUnimplementedClerkStorageHandlerServiceServer() {
}

// UnsafeClerkStorageHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkStorageHandlerServiceServer will
// result in compilation errors.
type UnsafeClerkStorageHandlerServiceServer interface {
	mustEmbedUnimplementedClerkStorageHandlerServiceServer()
}

func RegisterClerkStorageHandlerServiceServer(s grpc.ServiceRegistrar, srv ClerkStorageHandlerServiceServer) {
	s.RegisterService(&ClerkStorageHandlerService_ServiceDesc, srv)
}

func _ClerkStorageHandlerService_CreateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkStorageHandlerServiceServer).CreateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkStorageHandlerService_CreateStoragePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkStorageHandlerServiceServer).CreateStoragePartition(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkStorageHandlerService_ServiceDesc is the grpc.ServiceDesc for ClerkStorageHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkStorageHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.ClerkStorageHandlerService",
	HandlerType: (*ClerkStorageHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStoragePartition",
			Handler:    _ClerkStorageHandlerService_CreateStoragePartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	CheckerHandlerService_GetAllObjectInstances_FullMethodName                = "/handlerproto.CheckerHandlerService/getAllObjectInstances"
	CheckerHandlerService_UpdateObjectInstance_FullMethodName                 = "/handlerproto.CheckerHandlerService/UpdateObjectInstance"
	CheckerHandlerService_CreateObjectInstanceCheck_FullMethodName            = "/handlerproto.CheckerHandlerService/CreateObjectInstanceCheck"
	CheckerHandlerService_GetStorageLocationByObjectInstanceId_FullMethodName = "/handlerproto.CheckerHandlerService/GetStorageLocationByObjectInstanceId"
	CheckerHandlerService_GetObjectById_FullMethodName                        = "/handlerproto.CheckerHandlerService/GetObjectById"
)

// CheckerHandlerServiceClient is the client API for CheckerHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerHandlerServiceClient interface {
	GetAllObjectInstances(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	UpdateObjectInstance(ctx context.Context, in *dlzamanagerproto.ObjectInstance, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error)
	CreateObjectInstanceCheck(ctx context.Context, in *dlzamanagerproto.ObjectInstanceCheck, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error)
	GetStorageLocationByObjectInstanceId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error)
	GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error)
}

type checkerHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerHandlerServiceClient(cc grpc.ClientConnInterface) CheckerHandlerServiceClient {
	return &checkerHandlerServiceClient{cc}
}

func (c *checkerHandlerServiceClient) GetAllObjectInstances(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, CheckerHandlerService_GetAllObjectInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerHandlerServiceClient) UpdateObjectInstance(ctx context.Context, in *dlzamanagerproto.ObjectInstance, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error) {
	out := new(dlzamanagerproto.NoParam)
	err := c.cc.Invoke(ctx, CheckerHandlerService_UpdateObjectInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerHandlerServiceClient) CreateObjectInstanceCheck(ctx context.Context, in *dlzamanagerproto.ObjectInstanceCheck, opts ...grpc.CallOption) (*dlzamanagerproto.NoParam, error) {
	out := new(dlzamanagerproto.NoParam)
	err := c.cc.Invoke(ctx, CheckerHandlerService_CreateObjectInstanceCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerHandlerServiceClient) GetStorageLocationByObjectInstanceId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error) {
	out := new(dlzamanagerproto.StorageLocation)
	err := c.cc.Invoke(ctx, CheckerHandlerService_GetStorageLocationByObjectInstanceId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerHandlerServiceClient) GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error) {
	out := new(dlzamanagerproto.Object)
	err := c.cc.Invoke(ctx, CheckerHandlerService_GetObjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerHandlerServiceServer is the server API for CheckerHandlerService service.
// All implementations must embed UnimplementedCheckerHandlerServiceServer
// for forward compatibility
type CheckerHandlerServiceServer interface {
	GetAllObjectInstances(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.ObjectInstances, error)
	UpdateObjectInstance(context.Context, *dlzamanagerproto.ObjectInstance) (*dlzamanagerproto.NoParam, error)
	CreateObjectInstanceCheck(context.Context, *dlzamanagerproto.ObjectInstanceCheck) (*dlzamanagerproto.NoParam, error)
	GetStorageLocationByObjectInstanceId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error)
	GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error)
	mustEmbedUnimplementedCheckerHandlerServiceServer()
}

// UnimplementedCheckerHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerHandlerServiceServer struct {
}

func (UnimplementedCheckerHandlerServiceServer) GetAllObjectInstances(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjectInstances not implemented")
}
func (UnimplementedCheckerHandlerServiceServer) UpdateObjectInstance(context.Context, *dlzamanagerproto.ObjectInstance) (*dlzamanagerproto.NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectInstance not implemented")
}
func (UnimplementedCheckerHandlerServiceServer) CreateObjectInstanceCheck(context.Context, *dlzamanagerproto.ObjectInstanceCheck) (*dlzamanagerproto.NoParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectInstanceCheck not implemented")
}
func (UnimplementedCheckerHandlerServiceServer) GetStorageLocationByObjectInstanceId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationByObjectInstanceId not implemented")
}
func (UnimplementedCheckerHandlerServiceServer) GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectById not implemented")
}
func (UnimplementedCheckerHandlerServiceServer) mustEmbedUnimplementedCheckerHandlerServiceServer() {}

// UnsafeCheckerHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerHandlerServiceServer will
// result in compilation errors.
type UnsafeCheckerHandlerServiceServer interface {
	mustEmbedUnimplementedCheckerHandlerServiceServer()
}

func RegisterCheckerHandlerServiceServer(s grpc.ServiceRegistrar, srv CheckerHandlerServiceServer) {
	s.RegisterService(&CheckerHandlerService_ServiceDesc, srv)
}

func _CheckerHandlerService_GetAllObjectInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerHandlerServiceServer).GetAllObjectInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerHandlerService_GetAllObjectInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerHandlerServiceServer).GetAllObjectInstances(ctx, req.(*dlzamanagerproto.NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerHandlerService_UpdateObjectInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.ObjectInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerHandlerServiceServer).UpdateObjectInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerHandlerService_UpdateObjectInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerHandlerServiceServer).UpdateObjectInstance(ctx, req.(*dlzamanagerproto.ObjectInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerHandlerService_CreateObjectInstanceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.ObjectInstanceCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerHandlerServiceServer).CreateObjectInstanceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerHandlerService_CreateObjectInstanceCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerHandlerServiceServer).CreateObjectInstanceCheck(ctx, req.(*dlzamanagerproto.ObjectInstanceCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerHandlerService_GetStorageLocationByObjectInstanceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerHandlerServiceServer).GetStorageLocationByObjectInstanceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerHandlerService_GetStorageLocationByObjectInstanceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerHandlerServiceServer).GetStorageLocationByObjectInstanceId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerHandlerService_GetObjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerHandlerServiceServer).GetObjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckerHandlerService_GetObjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerHandlerServiceServer).GetObjectById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckerHandlerService_ServiceDesc is the grpc.ServiceDesc for CheckerHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckerHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.CheckerHandlerService",
	HandlerType: (*CheckerHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAllObjectInstances",
			Handler:    _CheckerHandlerService_GetAllObjectInstances_Handler,
		},
		{
			MethodName: "UpdateObjectInstance",
			Handler:    _CheckerHandlerService_UpdateObjectInstance_Handler,
		},
		{
			MethodName: "CreateObjectInstanceCheck",
			Handler:    _CheckerHandlerService_CreateObjectInstanceCheck_Handler,
		},
		{
			MethodName: "GetStorageLocationByObjectInstanceId",
			Handler:    _CheckerHandlerService_GetStorageLocationByObjectInstanceId_Handler,
		},
		{
			MethodName: "GetObjectById",
			Handler:    _CheckerHandlerService_GetObjectById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	StorageHandlerHandlerService_Ping_FullMethodName                                        = "/handlerproto.StorageHandlerHandlerService/Ping"
	StorageHandlerHandlerService_TenantHasAccess_FullMethodName                             = "/handlerproto.StorageHandlerHandlerService/TenantHasAccess"
	StorageHandlerHandlerService_GetStorageLocationsByCollectionAlias_FullMethodName        = "/handlerproto.StorageHandlerHandlerService/GetStorageLocationsByCollectionAlias"
	StorageHandlerHandlerService_GetStorageLocationsByObjectId_FullMethodName               = "/handlerproto.StorageHandlerHandlerService/GetStorageLocationsByObjectId"
	StorageHandlerHandlerService_GetStoragePartitionForLocation_FullMethodName              = "/handlerproto.StorageHandlerHandlerService/GetStoragePartitionForLocation"
	StorageHandlerHandlerService_SaveAllTableObjectsAfterCopying_FullMethodName             = "/handlerproto.StorageHandlerHandlerService/SaveAllTableObjectsAfterCopying"
	StorageHandlerHandlerService_GetStorageLocationById_FullMethodName                      = "/handlerproto.StorageHandlerHandlerService/GetStorageLocationById"
	StorageHandlerHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_FullMethodName = "/handlerproto.StorageHandlerHandlerService/GetAndSaveStoragePartitionWithRelevantAlias"
	StorageHandlerHandlerService_UpdateStoragePartition_FullMethodName                      = "/handlerproto.StorageHandlerHandlerService/UpdateStoragePartition"
	StorageHandlerHandlerService_GetObjectsByCollectionAlias_FullMethodName                 = "/handlerproto.StorageHandlerHandlerService/GetObjectsByCollectionAlias"
	StorageHandlerHandlerService_GetObjectsInstancesByObjectId_FullMethodName               = "/handlerproto.StorageHandlerHandlerService/GetObjectsInstancesByObjectId"
	StorageHandlerHandlerService_CreateObjectInstance_FullMethodName                        = "/handlerproto.StorageHandlerHandlerService/CreateObjectInstance"
	StorageHandlerHandlerService_GetStoragePartitionsByStorageLocationId_FullMethodName     = "/handlerproto.StorageHandlerHandlerService/GetStoragePartitionsByStorageLocationId"
	StorageHandlerHandlerService_DeleteObjectInstance_FullMethodName                        = "/handlerproto.StorageHandlerHandlerService/DeleteObjectInstance"
	StorageHandlerHandlerService_AlterStatus_FullMethodName                                 = "/handlerproto.StorageHandlerHandlerService/AlterStatus"
)

// StorageHandlerHandlerServiceClient is the client API for StorageHandlerHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageHandlerHandlerServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	TenantHasAccess(ctx context.Context, in *dlzamanagerproto.UploaderAccessObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetStorageLocationsByCollectionAlias(ctx context.Context, in *dlzamanagerproto.CollectionAlias, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	GetStorageLocationsByObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionForLocation(ctx context.Context, in *dlzamanagerproto.SizeAndId, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error)
	SaveAllTableObjectsAfterCopying(ctx context.Context, in *dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error)
	GetAndSaveStoragePartitionWithRelevantAlias(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error)
	UpdateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetObjectsByCollectionAlias(ctx context.Context, in *dlzamanagerproto.CollectionAlias, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error)
	GetObjectsInstancesByObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	CreateObjectInstance(ctx context.Context, in *dlzamanagerproto.ObjectInstance, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	GetStoragePartitionsByStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error)
	DeleteObjectInstance(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
}

type storageHandlerHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageHandlerHandlerServiceClient(cc grpc.ClientConnInterface) StorageHandlerHandlerServiceClient {
	return &storageHandlerHandlerServiceClient{cc}
}

func (c *storageHandlerHandlerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) TenantHasAccess(ctx context.Context, in *dlzamanagerproto.UploaderAccessObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_TenantHasAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetStorageLocationsByCollectionAlias(ctx context.Context, in *dlzamanagerproto.CollectionAlias, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetStorageLocationsByCollectionAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetStorageLocationsByObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetStorageLocationsByObjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetStoragePartitionForLocation(ctx context.Context, in *dlzamanagerproto.SizeAndId, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error) {
	out := new(dlzamanagerproto.StoragePartition)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetStoragePartitionForLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) SaveAllTableObjectsAfterCopying(ctx context.Context, in *dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_SaveAllTableObjectsAfterCopying_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error) {
	out := new(dlzamanagerproto.StorageLocation)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetStorageLocationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetAndSaveStoragePartitionWithRelevantAlias(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error) {
	out := new(dlzamanagerproto.StoragePartition)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) UpdateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_UpdateStoragePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetObjectsByCollectionAlias(ctx context.Context, in *dlzamanagerproto.CollectionAlias, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error) {
	out := new(dlzamanagerproto.Objects)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetObjectsByCollectionAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetObjectsInstancesByObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetObjectsInstancesByObjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) CreateObjectInstance(ctx context.Context, in *dlzamanagerproto.ObjectInstance, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_CreateObjectInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) GetStoragePartitionsByStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error) {
	out := new(dlzamanagerproto.StoragePartitions)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_GetStoragePartitionsByStorageLocationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) DeleteObjectInstance(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_DeleteObjectInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHandlerHandlerServiceClient) AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, StorageHandlerHandlerService_AlterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageHandlerHandlerServiceServer is the server API for StorageHandlerHandlerService service.
// All implementations must embed UnimplementedStorageHandlerHandlerServiceServer
// for forward compatibility
type StorageHandlerHandlerServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	TenantHasAccess(context.Context, *dlzamanagerproto.UploaderAccessObject) (*dlzamanagerproto.Status, error)
	GetStorageLocationsByCollectionAlias(context.Context, *dlzamanagerproto.CollectionAlias) (*dlzamanagerproto.StorageLocations, error)
	GetStorageLocationsByObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionForLocation(context.Context, *dlzamanagerproto.SizeAndId) (*dlzamanagerproto.StoragePartition, error)
	SaveAllTableObjectsAfterCopying(context.Context, *dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles) (*dlzamanagerproto.Status, error)
	GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error)
	GetAndSaveStoragePartitionWithRelevantAlias(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.StoragePartition, error)
	UpdateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error)
	GetObjectsByCollectionAlias(context.Context, *dlzamanagerproto.CollectionAlias) (*dlzamanagerproto.Objects, error)
	GetObjectsInstancesByObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error)
	CreateObjectInstance(context.Context, *dlzamanagerproto.ObjectInstance) (*dlzamanagerproto.Id, error)
	GetStoragePartitionsByStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartitions, error)
	DeleteObjectInstance(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error)
	mustEmbedUnimplementedStorageHandlerHandlerServiceServer()
}

// UnimplementedStorageHandlerHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageHandlerHandlerServiceServer struct {
}

func (UnimplementedStorageHandlerHandlerServiceServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) TenantHasAccess(context.Context, *dlzamanagerproto.UploaderAccessObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantHasAccess not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetStorageLocationsByCollectionAlias(context.Context, *dlzamanagerproto.CollectionAlias) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByCollectionAlias not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetStorageLocationsByObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByObjectId not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetStoragePartitionForLocation(context.Context, *dlzamanagerproto.SizeAndId) (*dlzamanagerproto.StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionForLocation not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) SaveAllTableObjectsAfterCopying(context.Context, *dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllTableObjectsAfterCopying not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationById not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetAndSaveStoragePartitionWithRelevantAlias(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndSaveStoragePartitionWithRelevantAlias not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) UpdateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoragePartition not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetObjectsByCollectionAlias(context.Context, *dlzamanagerproto.CollectionAlias) (*dlzamanagerproto.Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByCollectionAlias not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetObjectsInstancesByObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInstancesByObjectId not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) CreateObjectInstance(context.Context, *dlzamanagerproto.ObjectInstance) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectInstance not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) GetStoragePartitionsByStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionsByStorageLocationId not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) DeleteObjectInstance(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectInstance not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedStorageHandlerHandlerServiceServer) mustEmbedUnimplementedStorageHandlerHandlerServiceServer() {
}

// UnsafeStorageHandlerHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageHandlerHandlerServiceServer will
// result in compilation errors.
type UnsafeStorageHandlerHandlerServiceServer interface {
	mustEmbedUnimplementedStorageHandlerHandlerServiceServer()
}

func RegisterStorageHandlerHandlerServiceServer(s grpc.ServiceRegistrar, srv StorageHandlerHandlerServiceServer) {
	s.RegisterService(&StorageHandlerHandlerService_ServiceDesc, srv)
}

func _StorageHandlerHandlerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_TenantHasAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.UploaderAccessObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).TenantHasAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_TenantHasAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).TenantHasAccess(ctx, req.(*dlzamanagerproto.UploaderAccessObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetStorageLocationsByCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.CollectionAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationsByCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetStorageLocationsByCollectionAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationsByCollectionAlias(ctx, req.(*dlzamanagerproto.CollectionAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetStorageLocationsByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationsByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetStorageLocationsByObjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationsByObjectId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetStoragePartitionForLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.SizeAndId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetStoragePartitionForLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetStoragePartitionForLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetStoragePartitionForLocation(ctx, req.(*dlzamanagerproto.SizeAndId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_SaveAllTableObjectsAfterCopying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).SaveAllTableObjectsAfterCopying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_SaveAllTableObjectsAfterCopying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).SaveAllTableObjectsAfterCopying(ctx, req.(*dlzamanagerproto.InstanceWithPartitionAndObjectWithFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetStorageLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetStorageLocationById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetAndSaveStoragePartitionWithRelevantAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetAndSaveStoragePartitionWithRelevantAlias(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_UpdateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).UpdateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_UpdateStoragePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).UpdateStoragePartition(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetObjectsByCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.CollectionAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetObjectsByCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetObjectsByCollectionAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetObjectsByCollectionAlias(ctx, req.(*dlzamanagerproto.CollectionAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetObjectsInstancesByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetObjectsInstancesByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetObjectsInstancesByObjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetObjectsInstancesByObjectId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_CreateObjectInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.ObjectInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).CreateObjectInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_CreateObjectInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).CreateObjectInstance(ctx, req.(*dlzamanagerproto.ObjectInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_GetStoragePartitionsByStorageLocationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).GetStoragePartitionsByStorageLocationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_GetStoragePartitionsByStorageLocationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).GetStoragePartitionsByStorageLocationId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_DeleteObjectInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).DeleteObjectInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_DeleteObjectInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).DeleteObjectInstance(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHandlerHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHandlerHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageHandlerHandlerService_AlterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHandlerHandlerServiceServer).AlterStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageHandlerHandlerService_ServiceDesc is the grpc.ServiceDesc for StorageHandlerHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageHandlerHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.StorageHandlerHandlerService",
	HandlerType: (*StorageHandlerHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StorageHandlerHandlerService_Ping_Handler,
		},
		{
			MethodName: "TenantHasAccess",
			Handler:    _StorageHandlerHandlerService_TenantHasAccess_Handler,
		},
		{
			MethodName: "GetStorageLocationsByCollectionAlias",
			Handler:    _StorageHandlerHandlerService_GetStorageLocationsByCollectionAlias_Handler,
		},
		{
			MethodName: "GetStorageLocationsByObjectId",
			Handler:    _StorageHandlerHandlerService_GetStorageLocationsByObjectId_Handler,
		},
		{
			MethodName: "GetStoragePartitionForLocation",
			Handler:    _StorageHandlerHandlerService_GetStoragePartitionForLocation_Handler,
		},
		{
			MethodName: "SaveAllTableObjectsAfterCopying",
			Handler:    _StorageHandlerHandlerService_SaveAllTableObjectsAfterCopying_Handler,
		},
		{
			MethodName: "GetStorageLocationById",
			Handler:    _StorageHandlerHandlerService_GetStorageLocationById_Handler,
		},
		{
			MethodName: "GetAndSaveStoragePartitionWithRelevantAlias",
			Handler:    _StorageHandlerHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_Handler,
		},
		{
			MethodName: "UpdateStoragePartition",
			Handler:    _StorageHandlerHandlerService_UpdateStoragePartition_Handler,
		},
		{
			MethodName: "GetObjectsByCollectionAlias",
			Handler:    _StorageHandlerHandlerService_GetObjectsByCollectionAlias_Handler,
		},
		{
			MethodName: "GetObjectsInstancesByObjectId",
			Handler:    _StorageHandlerHandlerService_GetObjectsInstancesByObjectId_Handler,
		},
		{
			MethodName: "CreateObjectInstance",
			Handler:    _StorageHandlerHandlerService_CreateObjectInstance_Handler,
		},
		{
			MethodName: "GetStoragePartitionsByStorageLocationId",
			Handler:    _StorageHandlerHandlerService_GetStoragePartitionsByStorageLocationId_Handler,
		},
		{
			MethodName: "DeleteObjectInstance",
			Handler:    _StorageHandlerHandlerService_DeleteObjectInstance_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _StorageHandlerHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	ClerkHandlerService_FindTenantById_FullMethodName                                     = "/handlerproto.ClerkHandlerService/FindTenantById"
	ClerkHandlerService_DeleteTenant_FullMethodName                                       = "/handlerproto.ClerkHandlerService/DeleteTenant"
	ClerkHandlerService_SaveTenant_FullMethodName                                         = "/handlerproto.ClerkHandlerService/SaveTenant"
	ClerkHandlerService_UpdateTenant_FullMethodName                                       = "/handlerproto.ClerkHandlerService/UpdateTenant"
	ClerkHandlerService_FindAllTenants_FullMethodName                                     = "/handlerproto.ClerkHandlerService/FindAllTenants"
	ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName                      = "/handlerproto.ClerkHandlerService/GetStorageLocationsByTenantId"
	ClerkHandlerService_SaveStorageLocation_FullMethodName                                = "/handlerproto.ClerkHandlerService/SaveStorageLocation"
	ClerkHandlerService_UpdateStorageLocation_FullMethodName                              = "/handlerproto.ClerkHandlerService/UpdateStorageLocation"
	ClerkHandlerService_DeleteStorageLocationById_FullMethodName                          = "/handlerproto.ClerkHandlerService/DeleteStorageLocationById"
	ClerkHandlerService_CreateStoragePartition_FullMethodName                             = "/handlerproto.ClerkHandlerService/CreateStoragePartition"
	ClerkHandlerService_UpdateStoragePartition_FullMethodName                             = "/handlerproto.ClerkHandlerService/UpdateStoragePartition"
	ClerkHandlerService_DeleteStoragePartitionById_FullMethodName                         = "/handlerproto.ClerkHandlerService/DeleteStoragePartitionById"
	ClerkHandlerService_GetCollectionsByTenantId_FullMethodName                           = "/handlerproto.ClerkHandlerService/GetCollectionsByTenantId"
	ClerkHandlerService_GetCollectionById_FullMethodName                                  = "/handlerproto.ClerkHandlerService/GetCollectionById"
	ClerkHandlerService_GetCollectionByIdFromMv_FullMethodName                            = "/handlerproto.ClerkHandlerService/GetCollectionByIdFromMv"
	ClerkHandlerService_DeleteCollectionById_FullMethodName                               = "/handlerproto.ClerkHandlerService/DeleteCollectionById"
	ClerkHandlerService_CreateCollection_FullMethodName                                   = "/handlerproto.ClerkHandlerService/CreateCollection"
	ClerkHandlerService_UpdateCollection_FullMethodName                                   = "/handlerproto.ClerkHandlerService/UpdateCollection"
	ClerkHandlerService_GetObjectById_FullMethodName                                      = "/handlerproto.ClerkHandlerService/GetObjectById"
	ClerkHandlerService_GetObjectsByChecksum_FullMethodName                               = "/handlerproto.ClerkHandlerService/GetObjectsByChecksum"
	ClerkHandlerService_GetObjectInstanceById_FullMethodName                              = "/handlerproto.ClerkHandlerService/GetObjectInstanceById"
	ClerkHandlerService_GetFileById_FullMethodName                                        = "/handlerproto.ClerkHandlerService/GetFileById"
	ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName                         = "/handlerproto.ClerkHandlerService/GetObjectInstanceCheckById"
	ClerkHandlerService_GetStorageLocationById_FullMethodName                             = "/handlerproto.ClerkHandlerService/GetStorageLocationById"
	ClerkHandlerService_GetStoragePartitionById_FullMethodName                            = "/handlerproto.ClerkHandlerService/GetStoragePartitionById"
	ClerkHandlerService_FindAllTenantsPaginated_FullMethodName                            = "/handlerproto.ClerkHandlerService/FindAllTenantsPaginated"
	ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName                  = "/handlerproto.ClerkHandlerService/GetCollectionsByTenantIdPaginated"
	ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName                  = "/handlerproto.ClerkHandlerService/GetObjectsByCollectionIdPaginated"
	ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName                    = "/handlerproto.ClerkHandlerService/GetFilesByCollectionIdPaginated"
	ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName                        = "/handlerproto.ClerkHandlerService/GetMimeTypesForCollectionId"
	ClerkHandlerService_GetPronomsForCollectionId_FullMethodName                          = "/handlerproto.ClerkHandlerService/GetPronomsForCollectionId"
	ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName              = "/handlerproto.ClerkHandlerService/GetObjectInstancesByObjectIdPaginated"
	ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName                        = "/handlerproto.ClerkHandlerService/GetFilesByObjectIdPaginated"
	ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName = "/handlerproto.ClerkHandlerService/GetObjectInstanceChecksByObjectInstanceIdPaginated"
	ClerkHandlerService_GetObjectInstancesByName_FullMethodName                           = "/handlerproto.ClerkHandlerService/GetObjectInstancesByName"
	ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName             = "/handlerproto.ClerkHandlerService/GetStorageLocationsByTenantIdPaginated"
	ClerkHandlerService_GetStorageLocationsByCollectionIdPaginated_FullMethodName         = "/handlerproto.ClerkHandlerService/GetStorageLocationsByCollectionIdPaginated"
	ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName          = "/handlerproto.ClerkHandlerService/GetStoragePartitionsByLocationIdPaginated"
	ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName    = "/handlerproto.ClerkHandlerService/GetObjectInstancesByStoragePartitionIdPaginated"
	ClerkHandlerService_GetStorageLocationsStatusForCollectionAlias_FullMethodName        = "/handlerproto.ClerkHandlerService/GetStorageLocationsStatusForCollectionAlias"
	ClerkHandlerService_CheckStatus_FullMethodName                                        = "/handlerproto.ClerkHandlerService/CheckStatus"
	ClerkHandlerService_CreateStatus_FullMethodName                                       = "/handlerproto.ClerkHandlerService/CreateStatus"
	ClerkHandlerService_AlterStatus_FullMethodName                                        = "/handlerproto.ClerkHandlerService/AlterStatus"
	ClerkHandlerService_GetResultingQualityForObject_FullMethodName                       = "/handlerproto.ClerkHandlerService/GetResultingQualityForObject"
	ClerkHandlerService_GetNeededQualityForObject_FullMethodName                          = "/handlerproto.ClerkHandlerService/GetNeededQualityForObject"
	ClerkHandlerService_GetStatusForObjectId_FullMethodName                               = "/handlerproto.ClerkHandlerService/GetStatusForObjectId"
	ClerkHandlerService_GetAmountOfErrorsByCollectionId_FullMethodName                    = "/handlerproto.ClerkHandlerService/GetAmountOfErrorsByCollectionId"
	ClerkHandlerService_GetAmountOfErrorsForStorageLocationId_FullMethodName              = "/handlerproto.ClerkHandlerService/GetAmountOfErrorsForStorageLocationId"
	ClerkHandlerService_GetAmountOfObjectsForStorageLocationId_FullMethodName             = "/handlerproto.ClerkHandlerService/GetAmountOfObjectsForStorageLocationId"
	ClerkHandlerService_GetAmountOfObjectsAndTotalSizeByTenantId_FullMethodName           = "/handlerproto.ClerkHandlerService/GetAmountOfObjectsAndTotalSizeByTenantId"
)

// ClerkHandlerServiceClient is the client API for ClerkHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkHandlerServiceClient interface {
	FindTenantById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Tenant, error)
	DeleteTenant(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	SaveTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	UpdateTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	FindAllTenants(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error)
	GetStorageLocationsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	SaveStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	UpdateStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	DeleteStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	UpdateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	DeleteStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetCollectionsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error)
	GetCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error)
	GetCollectionByIdFromMv(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error)
	DeleteCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	CreateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	UpdateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error)
	GetObjectsByChecksum(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error)
	GetObjectInstanceById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstance, error)
	GetFileById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.File, error)
	GetObjectInstanceCheckById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceCheck, error)
	GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error)
	GetStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error)
	FindAllTenantsPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error)
	GetCollectionsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error)
	GetObjectsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error)
	GetFilesByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error)
	GetMimeTypesForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.MimeTypes, error)
	GetPronomsForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	GetFilesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceChecks, error)
	GetObjectInstancesByName(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	GetStorageLocationsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error)
	GetStorageLocationsStatusForCollectionAlias(ctx context.Context, in *dlzamanagerproto.SizeAndId, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	CheckStatus(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StatusObject, error)
	CreateStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error)
	AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error)
	GetResultingQualityForObject(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetNeededQualityForObject(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetStatusForObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfErrorsByCollectionId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfErrorsForStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfObjectsForStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfObjectsAndTotalSizeByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.AmountAndSize, error)
}

type clerkHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkHandlerServiceClient(cc grpc.ClientConnInterface) ClerkHandlerServiceClient {
	return &clerkHandlerServiceClient{cc}
}

func (c *clerkHandlerServiceClient) FindTenantById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Tenant, error) {
	out := new(dlzamanagerproto.Tenant)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindTenantById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteTenant(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_SaveTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateTenant(ctx context.Context, in *dlzamanagerproto.Tenant, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenants(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error) {
	out := new(dlzamanagerproto.Tenants)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindAllTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_SaveStorageLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateStorageLocation(ctx context.Context, in *dlzamanagerproto.StorageLocation, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateStorageLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteStorageLocationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CreateStoragePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateStoragePartition(ctx context.Context, in *dlzamanagerproto.StoragePartition, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateStoragePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteStoragePartitionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error) {
	out := new(dlzamanagerproto.Collections)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionsByTenantId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error) {
	out := new(dlzamanagerproto.Collection)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionByIdFromMv(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Collection, error) {
	out := new(dlzamanagerproto.Collection)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionByIdFromMv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteCollectionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_DeleteCollectionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateCollection(ctx context.Context, in *dlzamanagerproto.Collection, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_UpdateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Object, error) {
	out := new(dlzamanagerproto.Object)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectsByChecksum(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error) {
	out := new(dlzamanagerproto.Objects)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectsByChecksum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstance, error) {
	out := new(dlzamanagerproto.ObjectInstance)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFileById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.File, error) {
	out := new(dlzamanagerproto.File)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFileById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceCheckById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceCheck, error) {
	out := new(dlzamanagerproto.ObjectInstanceCheck)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocation, error) {
	out := new(dlzamanagerproto.StorageLocation)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionById(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartition, error) {
	out := new(dlzamanagerproto.StoragePartition)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStoragePartitionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenantsPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Tenants, error) {
	out := new(dlzamanagerproto.Tenants)
	err := c.cc.Invoke(ctx, ClerkHandlerService_FindAllTenantsPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Collections, error) {
	out := new(dlzamanagerproto.Collections)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Objects, error) {
	out := new(dlzamanagerproto.Objects)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error) {
	out := new(dlzamanagerproto.Files)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetMimeTypesForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.MimeTypes, error) {
	out := new(dlzamanagerproto.MimeTypes)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetPronomsForCollectionId(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Pronoms, error) {
	out := new(dlzamanagerproto.Pronoms)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetPronomsForCollectionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByObjectIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.Files, error) {
	out := new(dlzamanagerproto.Files)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstanceChecks, error) {
	out := new(dlzamanagerproto.ObjectInstanceChecks)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByName(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstancesByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByCollectionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StorageLocations, error) {
	out := new(dlzamanagerproto.StorageLocations)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsByCollectionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.StoragePartitions, error) {
	out := new(dlzamanagerproto.StoragePartitions)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *dlzamanagerproto.Pagination, opts ...grpc.CallOption) (*dlzamanagerproto.ObjectInstances, error) {
	out := new(dlzamanagerproto.ObjectInstances)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsStatusForCollectionAlias(ctx context.Context, in *dlzamanagerproto.SizeAndId, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStorageLocationsStatusForCollectionAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CheckStatus(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.StatusObject, error) {
	out := new(dlzamanagerproto.StatusObject)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CheckStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Id, error) {
	out := new(dlzamanagerproto.Id)
	err := c.cc.Invoke(ctx, ClerkHandlerService_CreateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) AlterStatus(ctx context.Context, in *dlzamanagerproto.StatusObject, opts ...grpc.CallOption) (*dlzamanagerproto.Status, error) {
	out := new(dlzamanagerproto.Status)
	err := c.cc.Invoke(ctx, ClerkHandlerService_AlterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetResultingQualityForObject(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetResultingQualityForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetNeededQualityForObject(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetNeededQualityForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStatusForObjectId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetStatusForObjectId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetAmountOfErrorsByCollectionId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetAmountOfErrorsByCollectionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetAmountOfErrorsForStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetAmountOfErrorsForStorageLocationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetAmountOfObjectsForStorageLocationId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.SizeAndId, error) {
	out := new(dlzamanagerproto.SizeAndId)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetAmountOfObjectsForStorageLocationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetAmountOfObjectsAndTotalSizeByTenantId(ctx context.Context, in *dlzamanagerproto.Id, opts ...grpc.CallOption) (*dlzamanagerproto.AmountAndSize, error) {
	out := new(dlzamanagerproto.AmountAndSize)
	err := c.cc.Invoke(ctx, ClerkHandlerService_GetAmountOfObjectsAndTotalSizeByTenantId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkHandlerServiceServer is the server API for ClerkHandlerService service.
// All implementations must embed UnimplementedClerkHandlerServiceServer
// for forward compatibility
type ClerkHandlerServiceServer interface {
	FindTenantById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Tenant, error)
	DeleteTenant(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	SaveTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error)
	UpdateTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error)
	FindAllTenants(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.Tenants, error)
	GetStorageLocationsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error)
	SaveStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Id, error)
	UpdateStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Status, error)
	DeleteStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Id, error)
	UpdateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error)
	DeleteStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	GetCollectionsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collections, error)
	GetCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error)
	GetCollectionByIdFromMv(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error)
	DeleteCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error)
	CreateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Id, error)
	UpdateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error)
	GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error)
	GetObjectsByChecksum(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Objects, error)
	GetObjectInstanceById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstance, error)
	GetFileById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.File, error)
	GetObjectInstanceCheckById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstanceCheck, error)
	GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error)
	GetStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartition, error)
	FindAllTenantsPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Tenants, error)
	GetCollectionsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Collections, error)
	GetObjectsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Objects, error)
	GetFilesByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error)
	GetMimeTypesForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.MimeTypes, error)
	GetPronomsForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error)
	GetFilesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstanceChecks, error)
	GetObjectInstancesByName(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error)
	GetStorageLocationsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error)
	GetStorageLocationsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error)
	GetStorageLocationsStatusForCollectionAlias(context.Context, *dlzamanagerproto.SizeAndId) (*dlzamanagerproto.Id, error)
	CheckStatus(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StatusObject, error)
	CreateStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Id, error)
	AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error)
	GetResultingQualityForObject(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetNeededQualityForObject(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetStatusForObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfErrorsByCollectionId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfErrorsForStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfObjectsForStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error)
	GetAmountOfObjectsAndTotalSizeByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.AmountAndSize, error)
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

// UnimplementedClerkHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkHandlerServiceServer struct {
}

func (UnimplementedClerkHandlerServiceServer) FindTenantById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteTenant(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateTenant(context.Context, *dlzamanagerproto.Tenant) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenants(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenants not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStorageLocation not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateStorageLocation(context.Context, *dlzamanagerproto.StorageLocation) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageLocation not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePartition not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateStoragePartition(context.Context, *dlzamanagerproto.StoragePartition) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoragePartition not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoragePartitionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionByIdFromMv(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionByIdFromMv not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteCollectionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateCollection(context.Context, *dlzamanagerproto.Collection) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectsByChecksum(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByChecksum not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFileById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceCheckById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstanceCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceCheckById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionById(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenantsPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenantsPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetMimeTypesForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.MimeTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMimeTypesForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetPronomsForCollectionId(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Pronoms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPronomsForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByObjectIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstanceChecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceChecksByObjectInstanceIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByName(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByName not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByCollectionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionsByLocationIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.StoragePartitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionsByLocationIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *dlzamanagerproto.Pagination) (*dlzamanagerproto.ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByStoragePartitionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsStatusForCollectionAlias(context.Context, *dlzamanagerproto.SizeAndId) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsStatusForCollectionAlias not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CheckStatus(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.StatusObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) AlterStatus(context.Context, *dlzamanagerproto.StatusObject) (*dlzamanagerproto.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetResultingQualityForObject(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultingQualityForObject not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetNeededQualityForObject(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeededQualityForObject not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStatusForObjectId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusForObjectId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetAmountOfErrorsByCollectionId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfErrorsByCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetAmountOfErrorsForStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfErrorsForStorageLocationId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetAmountOfObjectsForStorageLocationId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.SizeAndId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfObjectsForStorageLocationId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetAmountOfObjectsAndTotalSizeByTenantId(context.Context, *dlzamanagerproto.Id) (*dlzamanagerproto.AmountAndSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfObjectsAndTotalSizeByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) mustEmbedUnimplementedClerkHandlerServiceServer() {}

// UnsafeClerkHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkHandlerServiceServer will
// result in compilation errors.
type UnsafeClerkHandlerServiceServer interface {
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

func RegisterClerkHandlerServiceServer(s grpc.ServiceRegistrar, srv ClerkHandlerServiceServer) {
	s.RegisterService(&ClerkHandlerService_ServiceDesc, srv)
}

func _ClerkHandlerService_FindTenantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindTenantById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_SaveTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, req.(*dlzamanagerproto.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, req.(*dlzamanagerproto.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindAllTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, req.(*dlzamanagerproto.NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsByTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StorageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_SaveStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, req.(*dlzamanagerproto.StorageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StorageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateStorageLocation(ctx, req.(*dlzamanagerproto.StorageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteStorageLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CreateStoragePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateStoragePartition(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateStoragePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateStoragePartition(ctx, req.(*dlzamanagerproto.StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteStoragePartitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteStoragePartitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteStoragePartitionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteStoragePartitionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionsByTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionByIdFromMv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionByIdFromMv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionByIdFromMv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionByIdFromMv(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_DeleteCollectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, req.(*dlzamanagerproto.Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_UpdateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, req.(*dlzamanagerproto.Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectsByChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectsByChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectsByChecksum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectsByChecksum(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceCheckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceCheckById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStoragePartitionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenantsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_FindAllTenantsPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetCollectionsByTenantIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectsByCollectionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFilesByCollectionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetMimeTypesForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetMimeTypesForCollectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetPronomsForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetPronomsForCollectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetFilesByObjectIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstancesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByName(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsByCollectionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByCollectionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, req.(*dlzamanagerproto.Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsStatusForCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.SizeAndId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsStatusForCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStorageLocationsStatusForCollectionAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsStatusForCollectionAlias(ctx, req.(*dlzamanagerproto.SizeAndId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_CreateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_AlterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, req.(*dlzamanagerproto.StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetResultingQualityForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetResultingQualityForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetResultingQualityForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetResultingQualityForObject(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetNeededQualityForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetNeededQualityForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetNeededQualityForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetNeededQualityForObject(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStatusForObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStatusForObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetStatusForObjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStatusForObjectId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetAmountOfErrorsByCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetAmountOfErrorsByCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetAmountOfErrorsByCollectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetAmountOfErrorsByCollectionId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetAmountOfErrorsForStorageLocationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetAmountOfErrorsForStorageLocationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetAmountOfErrorsForStorageLocationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetAmountOfErrorsForStorageLocationId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetAmountOfObjectsForStorageLocationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetAmountOfObjectsForStorageLocationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetAmountOfObjectsForStorageLocationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetAmountOfObjectsForStorageLocationId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetAmountOfObjectsAndTotalSizeByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetAmountOfObjectsAndTotalSizeByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClerkHandlerService_GetAmountOfObjectsAndTotalSizeByTenantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetAmountOfObjectsAndTotalSizeByTenantId(ctx, req.(*dlzamanagerproto.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkHandlerService_ServiceDesc is the grpc.ServiceDesc for ClerkHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.ClerkHandlerService",
	HandlerType: (*ClerkHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTenantById",
			Handler:    _ClerkHandlerService_FindTenantById_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _ClerkHandlerService_DeleteTenant_Handler,
		},
		{
			MethodName: "SaveTenant",
			Handler:    _ClerkHandlerService_SaveTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _ClerkHandlerService_UpdateTenant_Handler,
		},
		{
			MethodName: "FindAllTenants",
			Handler:    _ClerkHandlerService_FindAllTenants_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantId",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantId_Handler,
		},
		{
			MethodName: "SaveStorageLocation",
			Handler:    _ClerkHandlerService_SaveStorageLocation_Handler,
		},
		{
			MethodName: "UpdateStorageLocation",
			Handler:    _ClerkHandlerService_UpdateStorageLocation_Handler,
		},
		{
			MethodName: "DeleteStorageLocationById",
			Handler:    _ClerkHandlerService_DeleteStorageLocationById_Handler,
		},
		{
			MethodName: "CreateStoragePartition",
			Handler:    _ClerkHandlerService_CreateStoragePartition_Handler,
		},
		{
			MethodName: "UpdateStoragePartition",
			Handler:    _ClerkHandlerService_UpdateStoragePartition_Handler,
		},
		{
			MethodName: "DeleteStoragePartitionById",
			Handler:    _ClerkHandlerService_DeleteStoragePartitionById_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantId",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantId_Handler,
		},
		{
			MethodName: "GetCollectionById",
			Handler:    _ClerkHandlerService_GetCollectionById_Handler,
		},
		{
			MethodName: "GetCollectionByIdFromMv",
			Handler:    _ClerkHandlerService_GetCollectionByIdFromMv_Handler,
		},
		{
			MethodName: "DeleteCollectionById",
			Handler:    _ClerkHandlerService_DeleteCollectionById_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _ClerkHandlerService_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _ClerkHandlerService_UpdateCollection_Handler,
		},
		{
			MethodName: "GetObjectById",
			Handler:    _ClerkHandlerService_GetObjectById_Handler,
		},
		{
			MethodName: "GetObjectsByChecksum",
			Handler:    _ClerkHandlerService_GetObjectsByChecksum_Handler,
		},
		{
			MethodName: "GetObjectInstanceById",
			Handler:    _ClerkHandlerService_GetObjectInstanceById_Handler,
		},
		{
			MethodName: "GetFileById",
			Handler:    _ClerkHandlerService_GetFileById_Handler,
		},
		{
			MethodName: "GetObjectInstanceCheckById",
			Handler:    _ClerkHandlerService_GetObjectInstanceCheckById_Handler,
		},
		{
			MethodName: "GetStorageLocationById",
			Handler:    _ClerkHandlerService_GetStorageLocationById_Handler,
		},
		{
			MethodName: "GetStoragePartitionById",
			Handler:    _ClerkHandlerService_GetStoragePartitionById_Handler,
		},
		{
			MethodName: "FindAllTenantsPaginated",
			Handler:    _ClerkHandlerService_FindAllTenantsPaginated_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectsByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetMimeTypesForCollectionId",
			Handler:    _ClerkHandlerService_GetMimeTypesForCollectionId_Handler,
		},
		{
			MethodName: "GetPronomsForCollectionId",
			Handler:    _ClerkHandlerService_GetPronomsForCollectionId_Handler,
		},
		{
			MethodName: "GetObjectInstancesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstanceChecksByObjectInstanceIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstancesByName",
			Handler:    _ClerkHandlerService_GetObjectInstancesByName_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetStorageLocationsByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetStorageLocationsByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetStoragePartitionsByLocationIdPaginated",
			Handler:    _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstancesByStoragePartitionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler,
		},
		{
			MethodName: "GetStorageLocationsStatusForCollectionAlias",
			Handler:    _ClerkHandlerService_GetStorageLocationsStatusForCollectionAlias_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _ClerkHandlerService_CheckStatus_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _ClerkHandlerService_CreateStatus_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _ClerkHandlerService_AlterStatus_Handler,
		},
		{
			MethodName: "GetResultingQualityForObject",
			Handler:    _ClerkHandlerService_GetResultingQualityForObject_Handler,
		},
		{
			MethodName: "GetNeededQualityForObject",
			Handler:    _ClerkHandlerService_GetNeededQualityForObject_Handler,
		},
		{
			MethodName: "GetStatusForObjectId",
			Handler:    _ClerkHandlerService_GetStatusForObjectId_Handler,
		},
		{
			MethodName: "GetAmountOfErrorsByCollectionId",
			Handler:    _ClerkHandlerService_GetAmountOfErrorsByCollectionId_Handler,
		},
		{
			MethodName: "GetAmountOfErrorsForStorageLocationId",
			Handler:    _ClerkHandlerService_GetAmountOfErrorsForStorageLocationId_Handler,
		},
		{
			MethodName: "GetAmountOfObjectsForStorageLocationId",
			Handler:    _ClerkHandlerService_GetAmountOfObjectsForStorageLocationId_Handler,
		},
		{
			MethodName: "GetAmountOfObjectsAndTotalSizeByTenantId",
			Handler:    _ClerkHandlerService_GetAmountOfObjectsAndTotalSizeByTenantId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}

const (
	DispatcherHandlerService_Ping_FullMethodName                     = "/handlerproto.DispatcherHandlerService/Ping"
	DispatcherHandlerService_GetLowQualityCollections_FullMethodName = "/handlerproto.DispatcherHandlerService/GetLowQualityCollections"
)

// DispatcherHandlerServiceClient is the client API for DispatcherHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherHandlerServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	GetLowQualityCollections(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.CollectionAliases, error)
}

type dispatcherHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherHandlerServiceClient(cc grpc.ClientConnInterface) DispatcherHandlerServiceClient {
	return &dispatcherHandlerServiceClient{cc}
}

func (c *dispatcherHandlerServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DispatcherHandlerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherHandlerServiceClient) GetLowQualityCollections(ctx context.Context, in *dlzamanagerproto.NoParam, opts ...grpc.CallOption) (*dlzamanagerproto.CollectionAliases, error) {
	out := new(dlzamanagerproto.CollectionAliases)
	err := c.cc.Invoke(ctx, DispatcherHandlerService_GetLowQualityCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherHandlerServiceServer is the server API for DispatcherHandlerService service.
// All implementations must embed UnimplementedDispatcherHandlerServiceServer
// for forward compatibility
type DispatcherHandlerServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	GetLowQualityCollections(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.CollectionAliases, error)
	mustEmbedUnimplementedDispatcherHandlerServiceServer()
}

// UnimplementedDispatcherHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherHandlerServiceServer struct {
}

func (UnimplementedDispatcherHandlerServiceServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDispatcherHandlerServiceServer) GetLowQualityCollections(context.Context, *dlzamanagerproto.NoParam) (*dlzamanagerproto.CollectionAliases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowQualityCollections not implemented")
}
func (UnimplementedDispatcherHandlerServiceServer) mustEmbedUnimplementedDispatcherHandlerServiceServer() {
}

// UnsafeDispatcherHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherHandlerServiceServer will
// result in compilation errors.
type UnsafeDispatcherHandlerServiceServer interface {
	mustEmbedUnimplementedDispatcherHandlerServiceServer()
}

func RegisterDispatcherHandlerServiceServer(s grpc.ServiceRegistrar, srv DispatcherHandlerServiceServer) {
	s.RegisterService(&DispatcherHandlerService_ServiceDesc, srv)
}

func _DispatcherHandlerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherHandlerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatcherHandlerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherHandlerServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherHandlerService_GetLowQualityCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dlzamanagerproto.NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherHandlerServiceServer).GetLowQualityCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatcherHandlerService_GetLowQualityCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherHandlerServiceServer).GetLowQualityCollections(ctx, req.(*dlzamanagerproto.NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherHandlerService_ServiceDesc is the grpc.ServiceDesc for DispatcherHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlerproto.DispatcherHandlerService",
	HandlerType: (*DispatcherHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DispatcherHandlerService_Ping_Handler,
		},
		{
			MethodName: "GetLowQualityCollections",
			Handler:    _DispatcherHandlerService_GetLowQualityCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler_proto.proto",
}
